version: '3.2'
services:
  frontend:
    build:
      dockerfile: ./docker/frontend/Dockerfile
      args:
        PHP_VERSION: $PHP_VERSION
    env_file:
      - ./.env
    ports:
      - "80:80"
    environment:
      PHP_ENABLE_XDEBUG: $PHP_ENABLE_XDEBUG
    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      - ./docker/frontend/sites-enabled:/etc/apache2/sites-enabled:delegated
#      - ./docker/frontend/certs:/etc/ssl/certs
      # Mount source-code for development
      - ./app:/app
  backend:
    build:
      dockerfile: ./docker/backend/Dockerfile
      args:
        PHP_VERSION: $PHP_VERSION
    env_file:
      - ./.env
    ports:
      - "8080:80"

    volumes:
      # Re-use local composer cache via host-volume
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      - ./docker/backend/sites-enabled:/etc/apache2/sites-enabled:delegated
      # Mount source-code for development
      - ./app:/app

  ngrok:
    image: ngrok/ngrok
    environment:
      NGROK_AUTHTOKEN: $NGROK_AUTH_TOKEN
    command: http --hostname=${NGROK_HOSTNAME} frontend:80
    ports:
      - "4040:4040"
#    command: >
#      sh -c "./ngrok http -hostname=${NGROK_HOSTNAME} 80"

  db:
    hostname: db
    image: mysql:8
    platform: linux/x86_64
    environment:
      MYSQL_ROOT_PASSWORD: $DB_PASSWORD
      MYSQL_DATABASE: $DB_NAME

    ports:
      - "3306:3306"
    volumes:
      - ./docker/db/storage/mysql:/var/lib/mysql
      - ./docker/db/logs:/var/log/mysql
  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"